// OpenHD uses mW (milli watt) but the iw dev command run in OpenHD converts that to milli dBm
// Here I have the (at least theoretical) mapping
ListModel{
    id: wifiCardTxPowerModel
    ListElement {title: "10mW  (10dBm)"; value: 10}
    ListElement {title: "25mW  (14dBm)"; value: 25}
    ListElement {title: "100mW (20dBm)"; value: 100}
    ListElement {title: "200mW (23dBm)"; value: 200}
    ListElement {title: "500mW (27dBm)"; value: 500}
    ListElement {title: "1000mW(30dBm)"; value: 1000}
}
function find_index(model,value){
    for(var i = 0; i < model.count; ++i) if (model.get(i).value===value) return i
    return -1
}
// try and update the combobox to the retrieved value(value != index)
function update_combobox(_combobox,_value){
    var _index=find_index(_combobox.model,_value)
    if(_index >= 0){
        _combobox.currentIndex=_index;
    }
}

/*int row=0;
bool found=false;
for(const auto& parameter: m_data){
    if(parameter.unique_id==param_id){
        found=true;
        // we got this parameter
        if(param_client){
            if(value.canConvert(QVariant::Type::Int)){
                int value_int=value.toInt();
                qDebug()<<"Set"<<param_id<<" to "<<value_int;
                const auto result=param_client->set_param_int(param_id.toStdString(),value_int);
                if(result==mavsdk::Param::Result::Success){
                    MavlinkSettingsModel::SettingData tmp{param_id,value_int};
                    updateData(std::nullopt,tmp);
                    return true;
                }else{
                    std::stringstream ss;
                    ss<<"Updating "<<param_id.toStdString()<<" to "<<value_int<<" failed: "<<result;
                    qDebug()<<QString(ss.str().c_str());
                    workaround::makePopupMessage(ss.str().c_str());
                    return false;
                }
            }
        }
    }
}
return false;*/
if(value.canConvert(QVariant::Type::Int)){
    const int value_int=value.toInt();
    qDebug()<<"Set"<<param_id<<" to "<<value_int;
    const auto result=param_client->set_param_int(param_id.toStdString(),value_int);
    if(result==mavsdk::Param::Result::Success){
        MavlinkSettingsModel::SettingData tmp{param_id,value_int};
        updateData(std::nullopt,tmp);
        return true;
    }else{
        std::stringstream ss;
        ss<<"Updating "<<param_id.toStdString()<<" to "<<value_int<<" failed: "<<result;
        qDebug()<<QString(ss.str().c_str());
        workaround::makePopupMessage(ss.str().c_str());
        return false;
    }
}
return false;



srand(time(NULL));   // Initialization, should only be called once.
------------------------------
int r = rand();      // Returns a pseudo-random integer between 0 and RAND_MAX.
r = r % 10;
if(r==0){
    qDebug()<<"Emulate dropped frame";
    return;
}


// -----------------------------------------------------------
FILE *f;
std::string in_filename;
if(settings.video_codec==QOpenHDVideoHelper::VideoCodecH264){
     in_filename="/home/consti10/Desktop/hello_drmprime/in/rpi_1080.h264";
}else if(settings.video_codec==QOpenHDVideoHelper::VideoCodecH265){
      //in_filename="/tmp/x_raw_h265.h265";
      in_filename="/home/consti10/Desktop/hello_drmprime/in/jetson_test.h265";
      //in_filename="/home/consti10/Desktop/hello_drmprime/in/Big_Buck_Bunny_1080_10s_1MB_h265.mp4";
}else{
   in_filename="/home/consti10/Desktop/hello_drmprime/in/uv_640x480.mjpeg";
   //in_filename="/home/consti10/Desktop/hello_drmprime/in/Big_Buck_Bunny_1080.mjpeg";
}

f = fopen(in_filename.c_str(), "rb");
if (!f) {
    fprintf(stderr, "Could not open %s\n");
    exit(1);
}
//---
 fclose(f);

// ----------
// read raw data from the input file
/*data_size = fread(inbuf, 1, INBUF_SIZE, f);

if (ferror(f))
    break;
eof = !data_size;

//use the parser to split the data into frames
data = inbuf;
while (data_size > 0 || eof) {
    ret = av_parser_parse2(parser, decoder_ctx, &pkt->data, &pkt->size,
                           data, data_size, AV_NOPTS_VALUE, AV_NOPTS_VALUE, 0);
    if (ret < 0) {
        fprintf(stderr, "Error while parsing\n");
        exit(1);
    }
    data      += ret;
    data_size -= ret;

    if (pkt->size){
        qDebug()<<"Feeding:"<<debug_av_packet(pkt).c_str();

        decode_and_wait_for_frame(pkt);
        std::this_thread::sleep_for(std::chrono::milliseconds(3000));
    }else if (eof)
        break;
}*/

// Ping is special, since there is no component differentation - any component can ping all systems,
// but never a specific system
// Obsolete, rpelaced by timesync
/*if(msg.msgid==MAVLINK_MSG_ID_PING){
    mavlink_ping_t ping;
    mavlink_msg_ping_decode(&msg, &ping);
    //qDebug()<<"Got ping message sender:"<<msg.sysid<<":"<<msg.compid<<" target:"<<ping.target_system<<":"<<ping.target_component<<"seq:"<<ping.seq;
    // We only process ping responses with our specific sys id and a matching sequence number.
    // Note that if the user clicks the ping multiple times in rapid succession, some pings might be dropped.
    // Check if the ping is targeted at our system
    if(ping.seq==pingSequenceNumber && ping.target_system==QOpenHDMavlinkHelper::getSysId()){
        const auto delta=QOpenHDMavlinkHelper::getTimeMicroseconds()-ping.time_usec;
        const auto delta_readable=time_microseconds_readable(delta);
        if(msg.sysid==OHD_SYS_ID_AIR){
            AOHDSystem::instanceAir().set_last_ping_result_openhd(delta_readable.c_str());
        }else if(msg.sysid==OHD_SYS_ID_GROUND){
            AOHDSystem::instanceGround().set_last_ping_result_openhd(delta_readable.c_str());
        }else{
            qDebug()<<"Got ping from fc";
            // almost 100% from flight controller
            //if(msg.compid==MAV_COMP_ID_AUTOPILOT1)
           FCMavlinkSystem::instance().set_last_ping_result_flight_ctrl(delta_readable.c_str());
        }
    }else{
        //qDebug()<<"Got ping message sender:"<<msg.sysid<<":"<<msg.compid<<" target:"<<ping.target_system<<":"<<ping.target_component<<"seq:"<<ping.seq;
    }
    return;
}*/

Loader {
    //source: {
        if (QOPENHD_ENABLE_VIDEO_VIA_AVCODEC) {
            console.log("Loading QSGVideoTextureItem")
            //return "QSGVideoTextureItem";
            QSGVideoTextureItem {
                id: my_QSGVideoTextureItem
            }
        }
        return ""
    //}
}

